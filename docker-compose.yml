services:
  postgres:
    container_name: postgres_container
    networks:
      - app-network
    env_file:
      - .env
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - ./db/postgres:/var/lib/postgresql/data
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: unless-stopped
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    env_file:
      - .env
    container_name: elasticsearch_container
    volumes:
      - ./db/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elk_network
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      discovery.type: single-node
    restart: always
  # kib01:
  #   image: docker.elastic.co/kibana/kibana:8.14.1
  #   container_name: kibana_container
  #   volumes:
  #     - ./elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
  #   ports:
  #     - 5601:5601
  #   networks:
  #     - elk_network
  #   links:
  #     - es01:elasticsearch
  #   depends_on:
  #     - es01
  # logs01:
  #   image: docker.elastic.co/logstash/logstash:8.14.1
  #   container_name: logstash_container
  #   ports:
  #     - 5044:5044
  #     - 9600:9600
  #   command: logstash -f /logstash_dir/logstash.conf
  #   volumes:
  #     - ./elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
  #     - ./elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
  #   networks:
  #     - elk_network
  #   depends_on:
  #     - es01
  # elysia:
  #   container_name: elysia_container
  #   networks:
  #     - app-network
  #   env_file:
  #     - .env
  #   image: lesedim/talktaketeach-backend-elysia:latest
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  adminer:
    image: adminer
    container_name: adminer_container
    restart: always
    env_file:
      - .env
    ports:
      - 8080:8080
    networks:
      - app-network
    depends_on:
      - postgres
networks:
  app-network:
    driver: bridge
  elk_network:
    driver: bridge
